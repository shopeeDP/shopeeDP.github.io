<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>dp 项目部署说明</title>
      <link href="/2018/07/11/shopee-deploy/"/>
      <url>/2018/07/11/shopee-deploy/</url>
      <content type="html"><![CDATA[<blockquote><p>shopee 前端项目部署涉及的点比较多，且部署过程中有些环节对于我们开发人员来说是黑盒， 很容易掉坑，为了 降低大家的采坑  概率，将自己摸索的经验总结如下</p></blockquote><p><a href="https://drive.google.com/drive/folders/1Y_2-35wXHMoEGMInCI3lmWenTYAJhHWk" target="_blank" rel="noopener">点击前往</a></p><p>| 作者：<a href="http://paradeto.com" target="_blank" rel="noopener">ayou</a></p>]]></content>
      
      <categories>
          
          <category> 项目文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git常用命令</title>
      <link href="/2018/07/11/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2018/07/11/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 组内分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浅析 webpack 打包机制</title>
      <link href="/2018/07/11/webpack-bundle-dive-into/"/>
      <url>/2018/07/11/webpack-bundle-dive-into/</url>
      <content type="html"><![CDATA[<h1 id="从最基本的开始"><a href="#从最基本的开始" class="headerlink" title="从最基本的开始"></a>从最基本的开始</h1><p>首先，让我们从一个简单的例子开始：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">  js</span><br><span class="line">    constants.js</span><br><span class="line">    index.js</span><br><span class="line">    utils.js</span><br><span class="line">  index.html</span><br><span class="line">package.json</span><br><span class="line">webpack.config.js</span><br></pre></td></tr></table></figure><p>其中，各文件内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="built_in">require</span>(<span class="string">'./utils'</span>).sum</span><br><span class="line"><span class="keyword">const</span> CONST = <span class="built_in">require</span>(<span class="string">'./constants'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(CONST.version)</span><br><span class="line"></span><br><span class="line"><span class="comment">// utils.js</span></span><br><span class="line">exports.sum = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// constants.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"> version: <span class="string">'1.1.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"> entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line"> output: &#123;</span><br><span class="line">   filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">   path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;hello&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"> &lt;script src="./</span>dist/bundle.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>打包出的结果经过简化后如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpackBootstrap 启动函数</span></span><br><span class="line"><span class="comment">// modules 即为存放所有模块的数组，数组中的每一个元素都是一个函数</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 安装后的模块缓存在该对象中</span></span><br><span class="line">  <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line">  <span class="comment">// 模块加载函数，跟 node.js 中的 require 语句类似</span></span><br><span class="line">  <span class="comment">// moduleId 为模块在数组 modules 中的索引</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果模块已经加载过，直接从缓存中返回</span></span><br><span class="line">    <span class="keyword">if</span> (installedModules[moduleId])</span><br><span class="line">      <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line">    <span class="comment">// 如果缓存中不存在需要加载的模块，就新建一个模块，存放在缓存中</span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line">      i: moduleId, <span class="comment">// 模块在数组中的索引</span></span><br><span class="line">      l: <span class="literal">false</span>, <span class="comment">// 还未加载</span></span><br><span class="line">      exports: &#123;&#125; <span class="comment">// 该模块的导出对象</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 执行模块函数</span></span><br><span class="line">    modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line">    <span class="comment">// 将模块标记为已加载</span></span><br><span class="line">    <span class="built_in">module</span>.l = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 返回该模块的导出对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 使用 __webpack_require__ 去加载 index 为 2 的模块，并且返回该模块导出的对象</span></span><br><span class="line">  <span class="comment">// __webpack_require__.s 表示该模块是启动模块</span></span><br><span class="line">  <span class="keyword">return</span> __webpack_require__(__webpack_require__.s = <span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line">([</span><br><span class="line">  <span class="comment">/* 0 */</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">      version: <span class="string">'1.1.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line">    exports.sum = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a + b</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> sum = __webpack_require__(<span class="number">1</span>).sum</span><br><span class="line">    <span class="keyword">const</span> CONST = __webpack_require__(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="built_in">console</span>.log(CONST.version)</span><br><span class="line">  &#125;)</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><ol><li><p>打包后的结果是一个自执行函数，其参数是一个数组，存储了各个模块，每个模块就是一个函数，其参数分别为 <code>module</code>, <code>exports</code>, <code>__webpack_require__</code>，每个模块以数组下标作为模块的 id。</p></li><li><p>自执行函数中定义了函数 <code>__webpack_require__(moduleId)</code>， 该函数类似于 nodejs 中的 require，其参数为模块 id，该函数首先判断模块是否已加载到 installedModules 对象之中，如果是，则直接返回缓存的结果，否则就新创建一个模块对象，并执行模块对应的函数，最后返回模块导出的内容。</p></li><li><p>自执行函数最后调用 <code>__webpack_require__(__webpack_require__.s = 2)</code> 并传入了入口模块的 id，这样整个应用就跑起来了。</p></li></ol><h1 id="模块异步加载"><a href="#模块异步加载" class="headerlink" title="模块异步加载"></a>模块异步加载</h1><p>假设我们的入口模块代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">'./page1'</span>).then(<span class="function"><span class="params">page</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(page)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(<span class="string">'./page2'</span>).then(<span class="function"><span class="params">page</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(page)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(<span class="string">'./page3'</span>).then(<span class="function"><span class="params">page</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(page)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(<span class="string">'./page4'</span>).then(<span class="function"><span class="params">page</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(page)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打包后的结果：</p><p><em>bundle.js</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line">  <span class="comment">// install a JSONP callback for chunk loading</span></span><br><span class="line">  <span class="keyword">var</span> parentJsonpFunction = <span class="built_in">window</span>[<span class="string">"webpackJsonp"</span>];</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 从异步加载的文件中安装模块</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; chunkIds 异步加载的文件中存放的需要安装的模块对应的 chunk id（包括自己），可以理解为所依赖的 chunk id</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; moreModules 表示该 chunk 加载后新带来的 modules</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; executeModules 需要执行的模块，可能为空</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="built_in">window</span>[<span class="string">"webpackJsonp"</span>] = <span class="function"><span class="keyword">function</span> <span class="title">webpackJsonpCallback</span>(<span class="params">chunkIds, moreModules, executeModules</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> moduleId, chunkId, i = <span class="number">0</span>, resolves = [], result;</span><br><span class="line">    <span class="keyword">for</span>(;i &lt; chunkIds.length; i++) &#123;</span><br><span class="line">      chunkId = chunkIds[i];</span><br><span class="line">      <span class="keyword">if</span>(installedChunks[chunkId])</span><br><span class="line">        <span class="comment">// 将 resolve 放到队列中后面统一执行</span></span><br><span class="line">        resolves.push(installedChunks[chunkId][<span class="number">0</span>]);</span><br><span class="line">      <span class="comment">// 标记该 chunk 加载成功</span></span><br><span class="line">      installedChunks[chunkId] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将 chunk 中的 modules 合并到 modules 中</span></span><br><span class="line">    <span class="keyword">for</span>(moduleId <span class="keyword">in</span> moreModules) &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.hasOwnProperty.call(moreModules, moduleId)) &#123;</span><br><span class="line">        modules[moduleId] = moreModules[moduleId];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);</span><br><span class="line">    <span class="keyword">while</span>(resolves.length)</span><br><span class="line">      resolves.shift()();</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The module cache</span></span><br><span class="line">  <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// objects to store loaded and loading chunks</span></span><br><span class="line">  <span class="keyword">var</span> installedChunks = &#123;</span><br><span class="line">    <span class="number">4</span>: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The require function</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if module is in cache</span></span><br><span class="line">    <span class="keyword">if</span>(installedModules[moduleId])</span><br><span class="line">      <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line">      i: moduleId,</span><br><span class="line">      l: <span class="literal">false</span>,</span><br><span class="line">      exports: &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Execute the module function</span></span><br><span class="line">    modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Flag the module as loaded</span></span><br><span class="line">    <span class="built_in">module</span>.l = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the exports of the module</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 异步加载分割出去的chunk对应的文件</span></span><br><span class="line"><span class="comment">  * @param &#123;*&#125; chunkId 需要异步加载的 chunk 对应的 id</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  __webpack_require__.e = <span class="function"><span class="keyword">function</span> <span class="title">requireEnsure</span>(<span class="params">chunkId</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 状态为 0 表示已经加载过</span></span><br><span class="line">    <span class="keyword">if</span>(installedChunks[chunkId] === <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不为 0 且不为空，表示正在加载，其实返回的是一个 Promise 对象，后面会看到</span></span><br><span class="line">    <span class="keyword">if</span>(installedChunks[chunkId]) &#123;</span><br><span class="line">      <span class="keyword">return</span> installedChunks[chunkId][<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 dom 操作插入 script 标签来异步加载 chunk 对应的 js 文件</span></span><br><span class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">    script.charset = <span class="string">'utf-8'</span>;</span><br><span class="line">    script.async = <span class="literal">true</span>;</span><br><span class="line">    script.timeout = <span class="number">120000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CSP 相关</span></span><br><span class="line">    <span class="keyword">if</span> (__webpack_require__.nc) &#123;</span><br><span class="line">      script.setAttribute(<span class="string">"nonce"</span>, __webpack_require__.nc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 文件的路径由配置的 publicPath, chunkId 拼接而成</span></span><br><span class="line">    script.src = __webpack_require__.p + <span class="string">""</span> + chunkId + <span class="string">".bundle.js"</span>;</span><br><span class="line">    <span class="comment">// 异步加载超时时间</span></span><br><span class="line">    <span class="keyword">var</span> timeout = setTimeout(onScriptComplete, <span class="number">120000</span>);</span><br><span class="line">    <span class="comment">// 加载失败或成功的回调函数</span></span><br><span class="line">    script.onerror = script.onload = onScriptComplete;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onScriptComplete</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 防止 IE 中内存泄漏</span></span><br><span class="line">      script.onerror = script.onload = <span class="literal">null</span>;</span><br><span class="line">      clearTimeout(timeout);</span><br><span class="line">      <span class="comment">// 检查 chunk 是否加载成功，如果不成功则 reject</span></span><br><span class="line">      <span class="keyword">var</span> chunk = installedChunks[chunkId];</span><br><span class="line">      <span class="keyword">if</span>(chunk !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(chunk) chunk[<span class="number">1</span>](<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Loading chunk '</span> + chunkId + <span class="string">' failed.'</span>));</span><br><span class="line">        installedChunks[chunkId] = <span class="literal">undefined</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 返回的 promise，初始化 installedChunks[chunkId] 为 [resolve, reject, promise]</span></span><br><span class="line">    <span class="comment">// 什么时候 resolve ?</span></span><br><span class="line">    <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      installedChunks[chunkId] = [resolve, reject];</span><br><span class="line">    &#125;);</span><br><span class="line">    installedChunks[chunkId][<span class="number">2</span>] = promise;</span><br><span class="line"></span><br><span class="line">    head.appendChild(script);</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// __webpack_public_path__</span></span><br><span class="line">  __webpack_require__.p = <span class="string">"dist/"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Load entry module and return exports</span></span><br><span class="line">  <span class="keyword">return</span> __webpack_require__(__webpack_require__.s = <span class="number">4</span>);</span><br><span class="line">&#125;)</span><br><span class="line">(&#123;</span><br><span class="line"><span class="comment">// 0 - 3 的 modules 被分割出去了</span></span><br><span class="line"><span class="comment">/***/</span> <span class="number">4</span>:</span><br><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">__webpack_require__.e<span class="comment">/* import() */</span>(<span class="number">3</span>).then(__webpack_require__.bind(<span class="literal">null</span>, <span class="number">0</span>)).then(<span class="function"><span class="params">page</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(page)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">__webpack_require__.e<span class="comment">/* import() */</span>(<span class="number">2</span>).then(__webpack_require__.bind(<span class="literal">null</span>, <span class="number">1</span>)).then(<span class="function"><span class="params">page</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(page)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">__webpack_require__.e<span class="comment">/* import() */</span>(<span class="number">1</span>).then(__webpack_require__.bind(<span class="literal">null</span>, <span class="number">2</span>)).then(<span class="function"><span class="params">page</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(page)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">__webpack_require__.e<span class="comment">/* import() */</span>(<span class="number">0</span>).then(__webpack_require__.bind(<span class="literal">null</span>, <span class="number">3</span>)).then(<span class="function"><span class="params">page</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(page)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><em>0.bundle.js</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">webpackJsonp([<span class="number">0</span>],&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">3</span>:</span><br><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">exports.name = <span class="string">'page1'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><p><code>bundle.js</code> 中 modules[4] 模块中执行的 <code>__webpack_require__.e/* import() */(0).then(__webpack_require__.bind(null, 3)).then(...)</code> 可以分解为两步：其中 <code>__webpack_require__.e/* import() */(0)</code> 是异步加载 chunk, <code>__webpack_require__.bind(null, 3)</code> 为安装模块。</p></li><li><p><code>__webpack_require__.e</code> 主要功能是通过 dom 操作插入 script 标签来异步加载 chunk 对应的 js 文件，新建了一个 Promise 对象 promise，并将 [resolve, reject, promise] 存在 installedChunks 中。</p></li><li><p>异步加载的 chunk 会执行 <code>webpackJsonp</code> 方法，该方法中会执行 installedChunks 中存放的 resolve 方法，从而通知 modules[4] 中的代码继续执行。</p></li></ol><p>整个过程可以用下图来表示：</p><p><img src="/images/webpack-bundle-dive-into/1.jpeg" alt=""></p><h1 id="提取公共代码"><a href="#提取公共代码" class="headerlink" title="提取公共代码"></a>提取公共代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">  js</span><br><span class="line">    components # 公用组件</span><br><span class="line">      layout.js</span><br><span class="line">    utils # 公用工具模块</span><br><span class="line">      utils.js</span><br><span class="line">    vendor # 基础库</span><br><span class="line">      react.js</span><br><span class="line">      react-dom.js</span><br><span class="line">    pageA.js</span><br><span class="line">    pageB.js</span><br></pre></td></tr></table></figure><p>有时候网站会由多个页面组成，每个页面都是一个独立的单页面应用，这些页面技术栈相同且包含相同的业务代码，如果每个页面的代码都将这些公共的部分包含进去，势必会造成：1) 相同的资源重复加载 2) 每个页面的体积太大</p><p>为了解决这个问题，可以将公共代码提取出来，具体到上面的例子，我们可能希望最终打包的结果像这样：</p><p><img src="/images/webpack-bundle-dive-into/2.png" alt=""></p><p>为了实现上述要求，可以使用 CommonsChunkPlugin:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"> entry: &#123;</span><br><span class="line">   pageA: path.resolve(__dirname, <span class="string">'src/js/pageA.js'</span>),</span><br><span class="line">   pageB: path.resolve(__dirname, <span class="string">'src/js/pageB.js'</span>)</span><br><span class="line"> &#125;,</span><br><span class="line"> output: &#123;</span><br><span class="line">   filename: <span class="string">'[name].[chunkhash:8].js'</span>,</span><br><span class="line">   path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">   publicPath: <span class="string">'dist/'</span>,</span><br><span class="line">   chunkFilename: <span class="string">'[name].js'</span></span><br><span class="line"> &#125;,</span><br><span class="line"> plugins: [</span><br><span class="line">   <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">     name: <span class="string">'common'</span>,</span><br><span class="line">     minChunks: <span class="number">2</span></span><br><span class="line">   &#125;),</span><br><span class="line">   <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">     name: <span class="string">'vendor'</span>,</span><br><span class="line">     minChunks: <span class="function">(<span class="params">&#123; resource &#125;</span>) =&gt;</span> (</span><br><span class="line">       resource &amp;&amp; resource.indexOf(<span class="string">'vendor'</span>) &gt;= <span class="number">0</span> &amp;&amp; resource.match(<span class="regexp">/\.js$/</span>)</span><br><span class="line">     )</span><br><span class="line">   &#125;)</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>| 作者：<a href="http://paradeto.com" target="_blank" rel="noopener">ayou</a></p>]]></content>
      
      <categories>
          
          <category> 组内分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用hexo写文章</title>
      <link href="/2018/06/20/%E4%BD%BF%E7%94%A8hexo%E5%86%99%E6%96%87%E7%AB%A0/"/>
      <url>/2018/06/20/%E4%BD%BF%E7%94%A8hexo%E5%86%99%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了发扬光大Shopee DP小组 前端团队<strong>一如既往的酷爱工作的热情</strong>，我们建立了这个博客，记录工作中遇到的点点滴滴。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这里分为两部分，一部分是博客源码，另一部分是操作博客。<br>博客源码存放在github上，相当于博客的砖砖瓦瓦；hexo则是操作工具，用于将这些砖瓦建起来。</p><h3 id="博客源码"><a href="#博客源码" class="headerlink" title="博客源码"></a>博客源码</h3><p>这里是我们的<a href="https://github.com/shopeeDP/our_blog.git" target="_blank" rel="noopener">源码</a>，通过git来进行操作管理。<br>每次写博客前记得pull，写完博客发布后别忘了push！</p><h3 id="操作博客"><a href="#操作博客" class="headerlink" title="操作博客"></a>操作博客</h3><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><pre><code>npm install -g hexo</code></pre><p>hexo安装完成后，安装依赖包</p><pre><code>npm install</code></pre><p>这里是hexo的一些常用命令，不需要记，后面用到了再来看就行  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo g      # hexo generate 命令的简写，用于生成静态文件</span><br><span class="line">hexo s      # hexo server 命令的简写，用于启动服务器进行本地预览</span><br><span class="line">hexo d      # hexo deploy 命令的简写，用于将本地文件发布到github上</span><br><span class="line">hexo n      # hexo new 命令的简写，用于新建一篇文章</span><br><span class="line">hexo clean  # 清除缓存文件（db.json）和已生成的静态文件（public）</span><br></pre></td></tr></table></figure><p>执行以下命令在本地启动</p><pre><code>hexo s</code></pre><p>然后通过浏览器访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>，可以看到博客已经成功运行起来了。这是在本地运行的博客，也就是hexo的本地预览功能。<br>接下来我们来把它挂载到github，让更多人喜欢工作，着迷工作，为工作疯狂。<br>先生成静态文件，执行以下命令</p><pre><code>hexo g</code></pre><p>接着发布到git上</p><pre><code>hexo d</code></pre><p>就可以在github上看到我们的博客了，从<a href="https://shopeedp.github.io/" target="_blank" rel="noopener">这里</a>进入</p><h5 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h5><p>运行新建文章的命令</p><pre><code>hexo n &quot;文章名字&quot;</code></pre><p>可以看到在本地的 ./source/_post/文件夹中已经新生成了一个md文件，hexo中文章是用markdown来写的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: my new post #可以改成中文的，如“新文章”</span><br><span class="line">date: 2018-06-20 17:16:15 #发表日期，一般不改动</span><br><span class="line">categories: blog #文章文类</span><br><span class="line">tags: [文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog</span><br><span class="line">---</span><br><span class="line">#这里是正文，用markdown写</span><br></pre></td></tr></table></figure></p><h5 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h5><p>markdown中插入图片的语法</p><pre><code>![Alt text](image path)</code></pre><ol><li>对于网上图片，只需要将图片的链接地址写入<code>image path</code>即可；</li><li>对于本地图片，需要将图片存入<code>/source/images/</code>文件夹中，再将相对地址<code>/images/图片名称</code> 写入<code>image path</code>，例如</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![Dk](/images/WechatIMG2.jpeg)</span><br></pre></td></tr></table></figure><p><img src="/images/WechatIMG2.jpeg" alt="aa"></p><ol start="3"><li>由于markdown没有控制图片大小的语法，所以控制图片大小要用 <code>&lt;img&gt;</code> 标签实现，例如</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&apos;/images/WechatIMG2.jpeg&apos; style=&apos;width: 200px;&apos;/&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/WechatIMG2.jpeg" style="width: 200px;"></p><h5 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h5><p>写完之后通过</p><pre><code>hexo s</code></pre><p>在本地预览效果，满意之后再发布到git上，但是这里要注意，最好在前面再加上hexo clean以清除缓存文件和已生成的静态文件，避免没法正常提交新文件的错误。</p><pre><code>hexo cleanhexo dhexo g</code></pre><p>将文章同步到github上。<br>最后记得<code>git push</code>将改动同步到源码上~</p><h4 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h4><p><a href="http://tengj.top/2016/02/22/hexo1/" target="_blank" rel="noopener">嘟嘟独立博客 hexo干活系列：（一）hexo+github搭建个人独立博客</a></p><p>| 作者：<a href="https://github.com/Darkindom" target="_blank" rel="noopener">Dk</a></p>]]></content>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
