<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[关于hexo站内搜索失败的解决方法]]></title>
    <url>%2F2018%2F08%2F03%2F%E5%85%B3%E4%BA%8Ehexo%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[搭建站内搜索在搭建hexo的过程中，想实现站内搜索的功能，从官网找到如下步骤： 出现问题v跟着上面步骤做完，发现点击搜索按钮，页面就一直处于loading的状态。 通过查阅资料后得知，是由于我们的文章markdown文件中，出现了一些奇怪的ASCII码，比如表示退格键的BS：可以看到，代码中出现了一个很小的BS，通过光标在文章中移动，可以很明显地感觉到光标在该字符处需要移动两次，但单从外观上几乎难以看出来，因为编辑器显示的时候不会将其显示出来： 这个就是导致我们站内搜索一直失败的罪魁祸首。 解决问题那么如何解决这个问题呢？ 手动删除在每一篇文章中，通过替换的方法将其替换为空。 Remove backspace control character使用插件 Remove backspace control character 安装好该插件后，通过 Format Document（Mac中通过Command + Shift + P 唤起，然后输入Format Document）的命令将文章中的异常字符去除，再保存 这样就可以正常使用站内搜索啦~！ 参考: vscode控制字符引起的问题以及解决思路 | 作者：Dk]]></content>
      <categories>
        <category>编程工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+github搭建个人博客]]></title>
    <url>%2F2018%2F07%2F20%2Fhexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[这个博客的搭建使用的是静态博客搭建框架hexo，配与next作为博客主题，最后将博客放到github上。省去了申请域名等麻烦的工作，使得搭建博客变得轻松简单。 Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown或其他渲染引擎解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 Next是hexo下的一个主题，在hexo中，阔以通过切换主题实现博客外观的改变。 安装Hexo依赖 Node.js git 需要电脑上先安装好Node.js和git 然后是安装hexo1npm install -g hexo 安装完毕后，选择一个文件夹，执行hexo init指令生成建立博客所需要的文件1hexo init 接着是安装所需要的依赖1npm install 等待依赖安装的过程可以看一下hexo的一些常用命令，不需要记，后面用到了再来看就行12345hexo g # hexo generate 命令的简写，用于生成静态文件hexo s # hexo server 命令的简写，用于启动服务器进行本地预览hexo d # hexo deploy 命令的简写，用于将本地文件发布到github上hexo n # hexo new 命令的简写，用于新建一篇文章hexo clean # 清除缓存文件（db.json）和已生成的静态文件（public） 在依赖安装完毕后，执行hexo g和hexo s，生成静态文件并启动服务器12hexo ghexo s 可以看到博客已经运行在 localhost:4000 端口上了，打开浏览器访问该地址即可以看到我们的博客已经搭建起来了，在这里可以非常方便地进行本地预览。更多细节可以参考官方文档 主题hexo默认使用的主题是landscape，我这里使用了最近比较流行的next主题。hexo安装主题的过程十分简单，在目录下找到themes文件夹，将要使用的主题文件夹拷入其中，再稍微修改一下配置即可。 安装nextnext有两种安装方式第一种是直接使用 git 克隆到themes文件夹，之后也可以直接通过git pull进行更新12// 定位至themes文件夹目录下git clone https://github.com/iissnan/hexo-theme-next 第二种是下载压缩包，然后解压至themes文件夹next版本发布页面 启用主题把next放入themes文件夹后，找到站点配置文件（根目录下的_config.yml文件），将theme字段的值改为next。如图所示 这时候执行ctrl + C中止本地服务器，然后通过hexo clean清除缓存后，再启动服务器，就可以看到博客的主题已经变成了next了。12hexo cleanhexo s next有很多可以自行配置的设定，如主题设定，语言设定，菜单设定，侧栏设定等等，还有很多诸如评论系统，内容分享，数据统计等强大功能。这里先埋个坑，不多赘述，详情可以前往next官网查看，以后有时间再补充。 部署到githubgithub仓库配置本地预览得满意了，下一步当然就是部署到网上给别人观赏~如果还未拥有github账号，就先去注册申请一个。 新建一个仓库，名字必须是你的github账号名.github.io如图所示，我的账号名是Darkindom，所以我的仓库名相应的就是Darkindom.github.io(这里仓库名前面要和你的账号名一致) 部署本地文件找到站点配置文件（根目录下的_config.yml文件），将其中的deploy改成以下格式（如果没有该字段就新建一个）。 这里如果是第一次使用github，或者更改过账号，可能需要重新配置一下SSH（因为之前使用公司的博客时，用的是另一个github账号，所以切换回来后部署的时候说权限错误，就需要重新配置SSH） 输入以下命令，如果提示要你输入的时候可以先输入回车，如果提示是否要覆盖原先SSH(y/n)输入y1ssh-keygen -t rsa -C &apos;your@email.com&apos; 接着输入以下命令1ssh-agent -s 如果这一步出错，就输入以下命令12eval `ssh-agent -s`ssh-add 接下来就可以把SSH拷贝出来，添加到github账户上了1cat ~/.ssh/id_rsa.pub 将控制台里的那一长串SSH拷贝，打开github账户title随便起一个自己容易辨别的，key里粘贴刚刚复制的SSH 最后测试一下，1ssh -T git@github.com 显示这样就是SSH配置好了 执行hexo g，hexo d部署到github上12hexo ghexo d 如果报了Error Deployer not found: git的错就安装hexo-deployer-git模块1npm install --save hexo-deployer-git 再执行hexo d,完成部署。打开浏览器，输入地址，比如我的就是https://darkindom.github.io/ 大功告成~！ 发布文章关于发布文章的可以看我的另一篇博客《使用hexo写文章》这里再提一点，多人合作的话可以将博客的相关代码保存在另一个git仓库，这样每次发布或者修改文章了，都可以备份到另一个仓库里，然后给权限即可。 参考嘟嘟独立博客 hexo干活系列：（一）hexo+github搭建个人独立博客 | 作者：Dk]]></content>
      <categories>
        <category>编程工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git常用命令]]></title>
    <url>%2F2018%2F07%2F11%2Fgit%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[常用git命令一、git状态工作区域工作区：日常编辑代码的地方本地仓库：保存本地提交记录暂存区：相当于工作区和本地仓库中简的缓存，代表要提交代码的一个工作状态，维护的是一个虚拟的树形结构 文件变化周期添加一个新文件A，A处于 Untracked 状态，通过add将其加至暂存区，A变成 Staged 状态，通过commit提交，A变成 Unmodified 状态，对 Unmodified 状态的文件进行修改，就变成 Unmodified 状态，删除文件，将会使其变成 Untracked 状态 二、基本config123456789查看git配置git config --list编辑git配置git config -e [--global]设置用户信息git config [--global] user.name &quot;[name]&quot;git config [--global] user.email &quot;[emali]&quot; status12显示工作目录和暂存区的状态git status log1234567891011121314151617查看提交历史git log--oneline 将每个提交放在一行显示git log --oneline--stat，仅显示简要的增改行数统计git log --stat--grep，搜索提交说明中的关键字git log --grep keywords-p 选项展开显示每次提交的内容差异git log -p -- file/path显示所有提交过的用户，按提交次数排序git shortlog -sn diff1234567891011比较暂存区和工作区的差异git diff比较暂存区和上一个commit的差异git diff --cached比较工作区与指定commit-id的差异git diff &lt;commit&gt; [path]显示今天你写了多少行代码git diff --shortstat &quot;@&#123;0 day ago&#125;&quot; 三、本地add1234567891011121314添加文件到暂存区git add [file...]添加指定路径的文件到暂存区git add [path]将所有文件从工作区添加到暂存区，包括修改的、新建的，但不包括删除的git add .将所有文件从工作区添加到暂存区，包括修改的、删除的，但不包括新建的git add -u将所有文件从工作区添加到暂存区，包括修改的、删除的、新建的git add -A commit1234567891011将文件从暂存区提交至本地仓库git commit -m &quot;[your message]&quot;撤销上一次提交git commit --amend将工作区自从上次提交之后的变化 提交至本地仓库git commit -a提交时显示所有diff信息git commit -v branch1234567891011121314151617181920212223242526显示所有本地分支git branch显示所有远程分支git branch -r显示所有分支，包括本地和远程git branch -a新建一个分支，以branch-name命名git branch &lt;branch-name&gt;将old branch分支重命名为new branchgit branch -m &lt;old branch&gt; &lt;new branch&gt;将branch分支强制移动至new place提交位置git branch -f &lt;branch&gt; [new place]新建一个分支branch，并与远程分支remote-branch建立追踪关系git branch --track &lt;branch&gt; &lt;remote-branch&gt;将本地分支branch与远程分支remote-branch建立追踪关系git branch --set-upstream &lt;branch&gt; &lt;remote-branch&gt;删除远程分支git branch -dr [remote/branch] checkout12345678切换至分支branchgit checkout &lt;branch&gt;新建并切换至分支new branchgit checkout -b [new branch]切换至上一个进行操作的分支git checkout - cherry-pick12将指定提交选定，并合进当前分支git cherry-pick &lt;commit 1&gt; ... &lt;commit n&gt; rebase123456以线性关系合并branchgit rebase &lt;upstream&gt; &lt;branch&gt;修改提交历史。startpoint, endpoint 表示一个编辑区间。endpoint如果不指定则默认当前HEAD所指向的commitgit rebase -i &lt;start point&gt; &lt;end point&gt; 四、远程clone12克隆远程仓库git clone remote1234567891011显示所有远程仓库git remote -v显示指定远程仓库git remote show &lt;remote&gt;添加一个远程仓库，并命名为 new namegit remote add &lt;new name&gt; &lt;url&gt;修改远程仓库的地址git remote set-url origin &lt;url&gt; fetch123456下载远程仓库所有变动git fetch从remote仓库的source获取提交记录，放到本地的destination上，如果没有source，将以destination创建一个新分支在本地git fetch &lt;remote&gt; &lt;source&gt;:&lt;destination&gt; pull123456789下载远程仓库的变动并更新至本地git pull从remote仓库的source获取提交记录，放到本地的destination上，最后将destination合并到当前分支上如果没有source，将以destination创建一个新分支在本地，再进行合并git pull &lt;remote&gt; &lt;source&gt;:&lt;destination&gt;以rebase的方式合并提交，相当于执行git fetch; git rebasegit pull --rebase push123456789101112将本地仓库的变动提交至远程仓库git push将本地仓库的source的提交上传至remote远程仓库的destination上如果没有source，将创建一个destination分支git push &lt;remote&gt; &lt;source&gt;:&lt;destination&gt;强行推送当前分支到远程仓库，即使有冲突git push [remote] --force推送所有分支到远程仓库git push [remote] --all 五、撤销checkout12345将所有暂存区的文件恢复到工作区git checkout .将指定暂存区的文件恢复到工作区git checkout &lt;file&gt; commit12重写上一次commitgit commit --amend merge12抛弃合并git merge --abort reset12345678910111213141516重置暂存区的指定文件git reset &lt;file&gt;重置当前分支的指针为指定提交，重置暂存区，工作区不变commit默认是HEAD，相当于git add的反操作git reset &lt;commit&gt;工作区不改变，但是暂存区会回退到上一次提交之前，HEAD回到上一个提交。git reset --mixed HEAD^工作区和暂存区不改变，HEAD回到上一个提交，即撤销最新的提交。git reset --sort HEAD^撤销最近的提交，工作区和暂存区都会回退到上一次提交的状态HEAD回到上一个提交，即自上一次以来的提交全部丢失。git reset --hard HEAD^ revert12新建一个提交，来撤销指定的提交git revert [commit] stash12345暂时将未提交的变化保存起来git stash恢复之前未提交的变化git stash pop | 作者：Dk]]></content>
      <categories>
        <category>文化交流</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo写文章]]></title>
    <url>%2F2018%2F06%2F20%2F%E4%BD%BF%E7%94%A8hexo%E5%86%99%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[前言为了发扬光大Shopee DP小组 前端团队一如既往的酷爱工作的热情，我们建立了这个博客，记录工作中遇到的点点滴滴。 正文这里分为两部分，一部分是博客源码，另一部分是操作博客。博客源码存放在github上，相当于博客的砖砖瓦瓦；hexo则是操作工具，用于将这些砖瓦建起来。 博客源码这里是我们的源码，通过git来进行操作管理。每次写博客前记得pull，写完博客发布后别忘了push！ 操作博客安装hexonpm install -g hexo hexo安装完成后，安装依赖包 npm install 这里是hexo的一些常用命令，不需要记，后面用到了再来看就行 12345hexo g # hexo generate 命令的简写，用于生成静态文件hexo s # hexo server 命令的简写，用于启动服务器进行本地预览hexo d # hexo deploy 命令的简写，用于将本地文件发布到github上hexo n # hexo new 命令的简写，用于新建一篇文章hexo clean # 清除缓存文件（db.json）和已生成的静态文件（public） 执行以下命令在本地启动 hexo s 然后通过浏览器访问http://localhost:4000，可以看到博客已经成功运行起来了。这是在本地运行的博客，也就是hexo的本地预览功能。接下来我们来把它挂载到github，让更多人喜欢工作，着迷工作，为工作疯狂。先生成静态文件，执行以下命令 hexo g 接着发布到git上 hexo d 就可以在github上看到我们的博客了，从这里进入 新建文章运行新建文章的命令 hexo n &quot;文章名字&quot; 可以看到在本地的 ./source/_post/文件夹中已经新生成了一个md文件，hexo中文章是用markdown来写的123456title: my new post #可以改成中文的，如“新文章”date: 2018-06-20 17:16:15 #发表日期，一般不改动categories: blog #文章文类tags: [文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog---#这里是正文，用markdown写 插入图片markdown中插入图片的语法 ![Alt text](image path) 对于网上图片，只需要将图片的链接地址写入image path即可； 对于本地图片，需要将图片存入/source/images/文件夹中，再将相对地址/images/图片名称 写入image path，例如 1![Dk](/images/WechatIMG2.jpeg) 由于markdown没有控制图片大小的语法，所以控制图片大小要用 &lt;img&gt; 标签实现，例如 1&lt;img src=&apos;/images/WechatIMG2.jpeg&apos; style=&apos;width: 200px;&apos;/&gt; 发布文章写完之后通过 hexo s 在本地预览效果，满意之后再发布到git上，但是这里要注意，最好在前面再加上hexo clean以清除缓存文件和已生成的静态文件，避免没法正常提交新文件的错误。 hexo clean hexo d hexo g 将文章同步到github上。最后记得git push将改动同步到源码上~ 三、参考嘟嘟独立博客 hexo干活系列：（一）hexo+github搭建个人独立博客 | 作者：Dk]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
