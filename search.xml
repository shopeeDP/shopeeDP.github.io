<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>关于hexo站内搜索失败的解决方法</title>
      <link href="/2018/08/03/%E5%85%B3%E4%BA%8Ehexo%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2018/08/03/%E5%85%B3%E4%BA%8Ehexo%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="搭建站内搜索"><a href="#搭建站内搜索" class="headerlink" title="搭建站内搜索"></a>搭建站内搜索</h2><p>在搭建hexo的过程中，想实现站内搜索的功能，从官网找到如下步骤：<br><img src="/images/search-problem/local-search.png" alt="local-search"></p><h2 id="出现问题v"><a href="#出现问题v" class="headerlink" title="出现问题v"></a>出现问题v</h2><p>跟着上面步骤做完，发现点击搜索按钮，页面就一直处于loading的状态。</p><p>通过查阅资料后得知，是由于我们的文章markdown文件中，出现了一些奇怪的ASCII码，比如表示退格键的BS：<br><img src="/images/search-problem/ASCII-bs.png" alt="ASCII-bs"><br>可以看到，代码中出现了一个很小的BS，<br>通过光标在文章中移动，可以很明显地感觉到光标在该字符处需要移动两次，但单从外观上几乎难以看出来，因为编辑器显示的时候不会将其显示出来：<br><img src="/images/search-problem/bs-error.png" alt="bs-error"></p><p>这个就是导致我们站内搜索一直失败的罪魁祸首。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>那么如何解决这个问题呢？</p><h3 id="手动删除"><a href="#手动删除" class="headerlink" title="手动删除"></a>手动删除</h3><p>在每一篇文章中，通过替换的方法将其替换为空。</p><h3 id="Remove-backspace-control-character"><a href="#Remove-backspace-control-character" class="headerlink" title="Remove backspace control character"></a>Remove backspace control character</h3><p>使用插件 <a href="https://marketplace.visualstudio.com/items?itemName=satokaz.vscode-bs-ctrlchar-remover" target="_blank" rel="noopener">Remove backspace control character</a></p><p>安装好该插件后，通过 <code>Format Document</code>（Mac中通过Command + Shift + P 唤起，然后输入Format Document）的命令将文章中的异常字符去除，再保存</p><p>这样就可以正常使用站内搜索啦~！</p><p>参考: <a href="https://wdd.js.org/vscode-control-characters-problem.html" target="_blank" rel="noopener">vscode控制字符引起的问题以及解决思路</a></p><p>| 作者：<a href="https://darkindom.github.io" target="_blank" rel="noopener">Dk</a></p>]]></content>
      
      <categories>
          
          <category> 编程工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo+github搭建个人博客</title>
      <link href="/2018/07/20/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/07/20/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>这个博客的搭建使用的是静态博客搭建框架hexo，配与next作为博客主题，最后将博客放到github上。省去了申请域名等麻烦的工作，使得搭建博客变得轻松简单。</p><blockquote><p>Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown或其他渲染引擎解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>Next是hexo下的一个主题，在hexo中，阔以通过切换主题实现博客外观的改变。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Hexo依赖</p><ul><li>Node.js</li><li>git</li></ul><p>需要电脑上先安装好Node.js和git</p><hr><p>然后是安装hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure></p><p>安装完毕后，选择一个文件夹，执行<code>hexo init</code>指令生成建立博客所需要的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></p><p>接着是安装所需要的依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>等待依赖安装的过程可以看一下hexo的一些常用命令，不需要记，后面用到了再来看就行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo g      # hexo generate 命令的简写，用于生成静态文件</span><br><span class="line">hexo s      # hexo server 命令的简写，用于启动服务器进行本地预览</span><br><span class="line">hexo d      # hexo deploy 命令的简写，用于将本地文件发布到github上</span><br><span class="line">hexo n      # hexo new 命令的简写，用于新建一篇文章</span><br><span class="line">hexo clean  # 清除缓存文件（db.json）和已生成的静态文件（public）</span><br></pre></td></tr></table></figure></p><p>在依赖安装完毕后，执行<code>hexo g</code>和<code>hexo s</code>，生成静态文件并启动服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p><img src="/images/my-first-blog/my-first-blog-pic1.png" alt="hexos"></p><p>可以看到博客已经运行在 localhost:4000 端口上了，打开浏览器访问该地址即可以看到我们的博客已经搭建起来了，在这里可以非常方便地进行本地预览。<br>更多细节可以参考<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">官方文档</a></p><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>hexo默认使用的主题是landscape，我这里使用了最近比较流行的next主题。<br>hexo安装主题的过程十分简单，在目录下找到<code>themes</code>文件夹，将要使用的主题文件夹拷入其中，再稍微修改一下配置即可。</p><h2 id="安装next"><a href="#安装next" class="headerlink" title="安装next"></a>安装next</h2><p>next有两种安装方式<br>第一种是直接使用 git 克隆到<code>themes</code>文件夹，之后也可以直接通过<code>git pull</code>进行更新<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 定位至themes文件夹目录下</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next</span><br></pre></td></tr></table></figure></p><p>第二种是下载压缩包，然后解压至<code>themes</code>文件夹<br><a href="https://github.com/iissnan/hexo-theme-next/releases" target="_blank" rel="noopener">next版本发布页面</a></p><h2 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h2><p>把next放入<code>themes</code>文件夹后，找到<strong>站点配置文件</strong>（根目录下的<code>_config.yml</code>文件），将<code>theme</code>字段的值改为<code>next</code>。如图所示<br><img src="/images/my-first-blog/my-first-blog-pic2.png" alt="config"></p><p>这时候执行<code>ctrl + C</code>中止本地服务器，然后通过<code>hexo clean</code>清除缓存后，再启动服务器，就可以看到博客的主题已经变成了next了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p>next有很多可以自行配置的设定，如主题设定，语言设定，菜单设定，侧栏设定等等，还有很多诸如评论系统，内容分享，数据统计等强大功能。<br>这里先埋个坑，不多赘述，详情可以前往<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">next官网</a>查看，以后有时间再补充。</p><h1 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h1><h2 id="github仓库配置"><a href="#github仓库配置" class="headerlink" title="github仓库配置"></a>github仓库配置</h2><p>本地预览得满意了，下一步当然就是部署到网上给别人观赏~<br>如果还未拥有github账号，就先去注册申请一个。</p><p>新建一个仓库，名字必须是<code>你的github账号名.github.io</code><br>如图所示，我的账号名是Darkindom，所以我的仓库名相应的就是<code>Darkindom.github.io</code>(这里仓库名前面要和你的账号名一致)<br><img src="/images/my-first-blog/my-first-blog-pic3.png" style="width: 400px;" alt="respository"></p><h2 id="部署本地文件"><a href="#部署本地文件" class="headerlink" title="部署本地文件"></a>部署本地文件</h2><p>找到<strong>站点配置文件</strong>（根目录下的<code>_config.yml</code>文件），将其中的deploy改成以下格式（如果没有该字段就新建一个）。</p><p><img src="/images/my-first-blog/my-first-blog-pic4.png" alt="deploy"></p><p>这里如果是第一次使用github，或者更改过账号，可能需要重新配置一下SSH<br>（因为之前使用公司的博客时，用的是另一个github账号，所以切换回来后部署的时候说权限错误，就需要重新配置SSH）</p><p>输入以下命令，如果提示要你输入的时候可以先输入回车，如果提示是否要覆盖原先SSH(y/n)输入y<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &apos;your@email.com&apos;</span><br></pre></td></tr></table></figure></p><!-- ![SSH-1](/images/my-first-blog/my-first-blog-pic5.png) --><p><img src="/images/my-first-blog/my-first-blog-pic6.png" alt="SSH-2"></p><p>接着输入以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent -s</span><br></pre></td></tr></table></figure></p><p><img src="/images/my-first-blog/my-first-blog-pic7.png" alt="SSH-3"></p><blockquote><p>如果这一步出错，就输入以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval `ssh-agent -s`</span><br><span class="line">ssh-add</span><br></pre></td></tr></table></figure></p></blockquote><p>接下来就可以把SSH拷贝出来，添加到github账户上了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p><p>将控制台里的那一长串SSH拷贝，打开github账户<br><img src="/images/my-first-blog/my-first-blog-pic8.png" style="width: 200px;" alt="ssh-setting"><br><img src="/images/my-first-blog/my-first-blog-pic9.png" alt="SSH-4"><br>title随便起一个自己容易辨别的，key里粘贴刚刚复制的SSH</p><p>最后测试一下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><p>显示这样就是SSH配置好了<br><img src="/images/my-first-blog/my-first-blog-pic10.png" alt="SSH-5"></p><p>执行<code>hexo g</code>，<code>hexo d</code>部署到github上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><p>如果报了<code>Error Deployer not found: git</code>的错<br>就安装<code>hexo-deployer-git</code>模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></p><p>再执行<code>hexo d</code>,完成部署。<br>打开浏览器，输入地址，比如我的就是<a href="https://darkindom.github.io/" target="_blank" rel="noopener">https://darkindom.github.io/</a></p><p>大功告成~！</p><h1 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h1><p>关于发布文章的可以看我的另一篇博客《使用hexo写文章》<br>这里再提一点，多人合作的话可以将博客的相关代码保存在另一个git仓库，这样每次发布或者修改文章了，都可以备份到另一个仓库里，然后给权限即可。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://tengj.top/2016/02/22/hexo1/" target="_blank" rel="noopener">嘟嘟独立博客 hexo干活系列：（一）hexo+github搭建个人独立博客</a></p><p>| 作者：<a href="https://darkindom.github.io" target="_blank" rel="noopener">Dk</a></p>]]></content>
      
      <categories>
          
          <category> 编程工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git常用命令</title>
      <link href="/2018/07/11/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2018/07/11/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="常用git命令"><a href="#常用git命令" class="headerlink" title="常用git命令"></a>常用git命令</h1><h2 id="一、git状态"><a href="#一、git状态" class="headerlink" title="一、git状态"></a>一、git状态</h2><h3 id="工作区域"><a href="#工作区域" class="headerlink" title="工作区域"></a>工作区域</h3><p><img src="/images/git-command/git-command-1.png" alt="git-area"><br>工作区：日常编辑代码的地方<br>本地仓库：保存本地提交记录<br>暂存区：相当于工作区和本地仓库中简的缓存，代表要提交代码的一个工作状态，维护的是一个虚拟的树形结构</p><h3 id="文件变化周期"><a href="#文件变化周期" class="headerlink" title="文件变化周期"></a>文件变化周期</h3><p><img src="/images/git-command/git-command-2.png" alt="git-file-live"><br>添加一个新文件A，A处于 <code>Untracked</code> 状态，<br>通过add将其加至暂存区，A变成 <code>Staged</code> 状态，<br>通过commit提交，A变成 <code>Unmodified</code> 状态，<br>对 <code>Unmodified</code> 状态的文件进行修改，就变成 <code>Unmodified</code> 状态，<br>删除文件，将会使其变成 <code>Untracked</code> 状态</p><h2 id="二、基本"><a href="#二、基本" class="headerlink" title="二、基本"></a>二、基本</h2><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">查看git配置</span><br><span class="line">git config --list</span><br><span class="line"></span><br><span class="line">编辑git配置</span><br><span class="line">git config -e [--global]</span><br><span class="line"></span><br><span class="line">设置用户信息</span><br><span class="line">git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">git config [--global] user.email &quot;[emali]&quot;</span><br></pre></td></tr></table></figure><h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">显示工作目录和暂存区的状态</span><br><span class="line">git status</span><br></pre></td></tr></table></figure><h3 id="log"><a href="#log" class="headerlink" title="log"></a>log</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">查看提交历史</span><br><span class="line">git log</span><br><span class="line"></span><br><span class="line">--oneline 将每个提交放在一行显示</span><br><span class="line">git log --oneline</span><br><span class="line"></span><br><span class="line">--stat，仅显示简要的增改行数统计</span><br><span class="line">git log --stat</span><br><span class="line"></span><br><span class="line">--grep，搜索提交说明中的关键字</span><br><span class="line">git log --grep keywords</span><br><span class="line"></span><br><span class="line">-p 选项展开显示每次提交的内容差异</span><br><span class="line">git log -p -- file/path</span><br><span class="line"></span><br><span class="line">显示所有提交过的用户，按提交次数排序</span><br><span class="line">git shortlog -sn</span><br></pre></td></tr></table></figure><h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">比较暂存区和工作区的差异</span><br><span class="line">git diff</span><br><span class="line"></span><br><span class="line">比较暂存区和上一个commit的差异</span><br><span class="line">git diff --cached</span><br><span class="line"></span><br><span class="line">比较工作区与指定commit-id的差异</span><br><span class="line">git diff &lt;commit&gt; [path]</span><br><span class="line"></span><br><span class="line">显示今天你写了多少行代码</span><br><span class="line">git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="三、本地"><a href="#三、本地" class="headerlink" title="三、本地"></a>三、本地</h2><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">添加文件到暂存区</span><br><span class="line">git add [file...]</span><br><span class="line"></span><br><span class="line">添加指定路径的文件到暂存区</span><br><span class="line">git add [path]</span><br><span class="line"></span><br><span class="line">将所有文件从工作区添加到暂存区，包括修改的、新建的，但不包括删除的</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">将所有文件从工作区添加到暂存区，包括修改的、删除的，但不包括新建的</span><br><span class="line">git add -u</span><br><span class="line"></span><br><span class="line">将所有文件从工作区添加到暂存区，包括修改的、删除的、新建的</span><br><span class="line">git add -A</span><br></pre></td></tr></table></figure><h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">将文件从暂存区提交至本地仓库</span><br><span class="line">git commit -m &quot;[your message]&quot;</span><br><span class="line"></span><br><span class="line">撤销上一次提交</span><br><span class="line">git commit --amend</span><br><span class="line"></span><br><span class="line">将工作区自从上次提交之后的变化 提交至本地仓库</span><br><span class="line">git commit -a</span><br><span class="line"></span><br><span class="line">提交时显示所有diff信息</span><br><span class="line">git commit -v</span><br></pre></td></tr></table></figure><h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">显示所有本地分支</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line">显示所有远程分支</span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line">显示所有分支，包括本地和远程</span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line">新建一个分支，以branch-name命名</span><br><span class="line">git branch &lt;branch-name&gt;</span><br><span class="line"></span><br><span class="line">将old branch分支重命名为new branch</span><br><span class="line">git branch -m &lt;old branch&gt; &lt;new branch&gt;</span><br><span class="line"></span><br><span class="line">将branch分支强制移动至new place提交位置</span><br><span class="line">git branch -f &lt;branch&gt; [new place]</span><br><span class="line"></span><br><span class="line">新建一个分支branch，并与远程分支remote-branch建立追踪关系</span><br><span class="line">git branch --track &lt;branch&gt; &lt;remote-branch&gt;</span><br><span class="line"></span><br><span class="line">将本地分支branch与远程分支remote-branch建立追踪关系</span><br><span class="line">git branch --set-upstream &lt;branch&gt; &lt;remote-branch&gt;</span><br><span class="line"></span><br><span class="line">删除远程分支</span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h3 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">切换至分支branch</span><br><span class="line">git checkout &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">新建并切换至分支new branch</span><br><span class="line">git checkout -b [new branch]</span><br><span class="line"></span><br><span class="line">切换至上一个进行操作的分支</span><br><span class="line">git checkout -</span><br></pre></td></tr></table></figure><h3 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将指定提交选定，并合进当前分支</span><br><span class="line">git cherry-pick &lt;commit 1&gt; ... &lt;commit n&gt;</span><br></pre></td></tr></table></figure><h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">以线性关系合并branch</span><br><span class="line">git rebase &lt;upstream&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">修改提交历史。</span><br><span class="line">startpoint, endpoint 表示一个编辑区间。endpoint如果不指定则默认当前HEAD所指向的commit</span><br><span class="line">git rebase -i &lt;start point&gt; &lt;end point&gt;</span><br></pre></td></tr></table></figure><h2 id="四、远程"><a href="#四、远程" class="headerlink" title="四、远程"></a>四、远程</h2><h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">克隆远程仓库</span><br><span class="line">git clone</span><br></pre></td></tr></table></figure><h3 id="remote"><a href="#remote" class="headerlink" title="remote"></a>remote</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">显示所有远程仓库</span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line">显示指定远程仓库</span><br><span class="line">git remote show &lt;remote&gt;</span><br><span class="line"></span><br><span class="line">添加一个远程仓库，并命名为 new name</span><br><span class="line">git remote add &lt;new name&gt; &lt;url&gt;</span><br><span class="line"></span><br><span class="line">修改远程仓库的地址</span><br><span class="line">git remote set-url origin &lt;url&gt;</span><br></pre></td></tr></table></figure><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">下载远程仓库所有变动</span><br><span class="line">git fetch</span><br><span class="line"></span><br><span class="line">从remote仓库的source获取提交记录，放到本地的destination上，</span><br><span class="line">如果没有source，将以destination创建一个新分支在本地</span><br><span class="line">git fetch &lt;remote&gt; &lt;source&gt;:&lt;destination&gt;</span><br></pre></td></tr></table></figure><h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">下载远程仓库的变动并更新至本地</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">从remote仓库的source获取提交记录，放到本地的destination上，最后将destination合并到当前分支上</span><br><span class="line">如果没有source，将以destination创建一个新分支在本地，再进行合并</span><br><span class="line">git pull &lt;remote&gt; &lt;source&gt;:&lt;destination&gt;</span><br><span class="line"></span><br><span class="line">以rebase的方式合并提交，相当于执行git fetch; git rebase</span><br><span class="line">git pull --rebase</span><br></pre></td></tr></table></figure><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">将本地仓库的变动提交至远程仓库</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">将本地仓库的source的提交上传至remote远程仓库的destination上</span><br><span class="line">如果没有source，将创建一个destination分支</span><br><span class="line">git push &lt;remote&gt; &lt;source&gt;:&lt;destination&gt;</span><br><span class="line"></span><br><span class="line">强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">git push [remote] --force</span><br><span class="line"></span><br><span class="line">推送所有分支到远程仓库</span><br><span class="line">git push [remote] --all</span><br></pre></td></tr></table></figure><h2 id="五、撤销"><a href="#五、撤销" class="headerlink" title="五、撤销"></a>五、撤销</h2><h3 id="checkout-1"><a href="#checkout-1" class="headerlink" title="checkout"></a>checkout</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将所有暂存区的文件恢复到工作区</span><br><span class="line">git checkout .</span><br><span class="line"></span><br><span class="line">将指定暂存区的文件恢复到工作区</span><br><span class="line">git checkout &lt;file&gt;</span><br></pre></td></tr></table></figure><h3 id="commit-1"><a href="#commit-1" class="headerlink" title="commit"></a>commit</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">重写上一次commit</span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">抛弃合并</span><br><span class="line">git merge --abort</span><br></pre></td></tr></table></figure><h3 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">重置暂存区的指定文件</span><br><span class="line">git reset &lt;file&gt;</span><br><span class="line"></span><br><span class="line">重置当前分支的指针为指定提交，重置暂存区，工作区不变</span><br><span class="line">commit默认是HEAD，相当于git add的反操作</span><br><span class="line">git reset &lt;commit&gt;</span><br><span class="line"></span><br><span class="line">工作区不改变，但是暂存区会回退到上一次提交之前，HEAD回到上一个提交。</span><br><span class="line">git reset --mixed HEAD^</span><br><span class="line"></span><br><span class="line">工作区和暂存区不改变，HEAD回到上一个提交，即撤销最新的提交。</span><br><span class="line">git reset --sort HEAD^</span><br><span class="line"></span><br><span class="line">撤销最近的提交，工作区和暂存区都会回退到上一次提交的状态</span><br><span class="line">HEAD回到上一个提交，即自上一次以来的提交全部丢失。</span><br><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><h3 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新建一个提交，来撤销指定的提交</span><br><span class="line">git revert [commit]</span><br></pre></td></tr></table></figure><h3 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">暂时将未提交的变化保存起来</span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line">恢复之前未提交的变化</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><p>| 作者：<a href="https://github.com/Darkindom" target="_blank" rel="noopener">Dk</a></p>]]></content>
      
      <categories>
          
          <category> 文化交流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用hexo写文章</title>
      <link href="/2018/06/20/%E4%BD%BF%E7%94%A8hexo%E5%86%99%E6%96%87%E7%AB%A0/"/>
      <url>/2018/06/20/%E4%BD%BF%E7%94%A8hexo%E5%86%99%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了发扬光大Shopee DP小组 前端团队<strong>一如既往的酷爱工作的热情</strong>，我们建立了这个博客，记录工作中遇到的点点滴滴。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这里分为两部分，一部分是博客源码，另一部分是操作博客。<br>博客源码存放在github上，相当于博客的砖砖瓦瓦；hexo则是操作工具，用于将这些砖瓦建起来。</p><h3 id="博客源码"><a href="#博客源码" class="headerlink" title="博客源码"></a>博客源码</h3><p>这里是我们的<a href="https://github.com/shopeeDP/our_blog.git" target="_blank" rel="noopener">源码</a>，通过git来进行操作管理。<br>每次写博客前记得pull，写完博客发布后别忘了push！</p><h3 id="操作博客"><a href="#操作博客" class="headerlink" title="操作博客"></a>操作博客</h3><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><pre><code>npm install -g hexo</code></pre><p>hexo安装完成后，安装依赖包</p><pre><code>npm install</code></pre><p>这里是hexo的一些常用命令，不需要记，后面用到了再来看就行  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo g      # hexo generate 命令的简写，用于生成静态文件</span><br><span class="line">hexo s      # hexo server 命令的简写，用于启动服务器进行本地预览</span><br><span class="line">hexo d      # hexo deploy 命令的简写，用于将本地文件发布到github上</span><br><span class="line">hexo n      # hexo new 命令的简写，用于新建一篇文章</span><br><span class="line">hexo clean  # 清除缓存文件（db.json）和已生成的静态文件（public）</span><br></pre></td></tr></table></figure><p>执行以下命令在本地启动</p><pre><code>hexo s</code></pre><p>然后通过浏览器访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>，可以看到博客已经成功运行起来了。这是在本地运行的博客，也就是hexo的本地预览功能。<br>接下来我们来把它挂载到github，让更多人喜欢工作，着迷工作，为工作疯狂。<br>先生成静态文件，执行以下命令</p><pre><code>hexo g</code></pre><p>接着发布到git上</p><pre><code>hexo d</code></pre><p>就可以在github上看到我们的博客了，从<a href="https://shopeedp.github.io/" target="_blank" rel="noopener">这里</a>进入</p><h5 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h5><p>运行新建文章的命令</p><pre><code>hexo n &quot;文章名字&quot;</code></pre><p>可以看到在本地的 ./source/_post/文件夹中已经新生成了一个md文件，hexo中文章是用markdown来写的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: my new post #可以改成中文的，如“新文章”</span><br><span class="line">date: 2018-06-20 17:16:15 #发表日期，一般不改动</span><br><span class="line">categories: blog #文章文类</span><br><span class="line">tags: [文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog</span><br><span class="line">---</span><br><span class="line">#这里是正文，用markdown写</span><br></pre></td></tr></table></figure></p><h5 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h5><p>markdown中插入图片的语法</p><pre><code>![Alt text](image path)</code></pre><ol><li>对于网上图片，只需要将图片的链接地址写入<code>image path</code>即可；</li><li>对于本地图片，需要将图片存入<code>/source/images/</code>文件夹中，再将相对地址<code>/images/图片名称</code> 写入<code>image path</code>，例如</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![Dk](/images/WechatIMG2.jpeg)</span><br></pre></td></tr></table></figure><p><img src="/images/WechatIMG2.jpeg" alt="aa"></p><ol start="3"><li>由于markdown没有控制图片大小的语法，所以控制图片大小要用 <code>&lt;img&gt;</code> 标签实现，例如</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&apos;/images/WechatIMG2.jpeg&apos; style=&apos;width: 200px;&apos;/&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/WechatIMG2.jpeg" style="width: 200px;"></p><h5 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h5><p>写完之后通过</p><pre><code>hexo s</code></pre><p>在本地预览效果，满意之后再发布到git上，但是这里要注意，最好在前面再加上hexo clean以清除缓存文件和已生成的静态文件，避免没法正常提交新文件的错误。</p><pre><code>hexo cleanhexo dhexo g</code></pre><p>将文章同步到github上。<br>最后记得<code>git push</code>将改动同步到源码上~</p><h4 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h4><p><a href="http://tengj.top/2016/02/22/hexo1/" target="_blank" rel="noopener">嘟嘟独立博客 hexo干活系列：（一）hexo+github搭建个人独立博客</a></p><p>| 作者：<a href="https://darkindom.github.io" target="_blank" rel="noopener">Dk</a></p>]]></content>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
